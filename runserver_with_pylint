"""
Includes pylint with runserver, command : $python manage.py runserver_with_pylint

file needs to be present in one of django app in following location: <your app name>/management/commands/runserver_with_pylint.py

´<your app name>´ should be present installed apps
"""

import os

from django.contrib.staticfiles.management.commands.runserver import Command as StaticfilesRunserverCommand

from pylint.lint import Run

ERROR_COUNT = 0
CONVENTION_COUNT = 5
WARNINGS = 5
CODEBASE = '<codebase location on which to run pylint>' # E.g. 'webapp'
THRESHOLD_LINT_SCORE = 9.5


class Command(StaticfilesRunserverCommand):
    help = "Starts a lightweight Web server for development, serves static files and does some custom fancy stuff."

    def run_pylint(self):
        """Runs Pylint on codebase and updates with status of files"""
        results = Run(['--load-plugins=pylint_django', '--rcfile=pylintrc', CODEBASE], exit=False)
        if results.linter.stats['error'] > ERROR_COUNT or results.linter.stats['convention'] > CONVENTION_COUNT or \
                results.linter.stats['warning'] > WARNINGS or results.linter.stats['global_note'] < THRESHOLD_LINT_SCORE:
            print("Codebase has failed set standards, Please correct above mentioned issues,"
                  "Current Score is: %s, Errors: %s, Convention issues: %s, Warnings: %s" % (\
                results.linter.stats['global_note'], results.linter.stats['error'], results.linter.stats['convention'],
                results.linter.stats['warning']))
            os._exit(1)

    def add_arguments(self, parser):
        super(Command, self).add_arguments(parser)

    def get_handler(self, *args, **options):
        """Overriden get handler method, call run_pylint for static analysis of code
        """
        handler = super(Command, self).get_handler(*args, **options)
        self.run_pylint()
        return handler
